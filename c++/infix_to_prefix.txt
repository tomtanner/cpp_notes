// steps:
// 1.first reverse the expression
// 2.reverse the brackets
// 3.apply the same algorithm which is used for postfix
// 4.reverse the expression 
// 5.return the expression
#include <iostream>
#include <stack>
#include <string>
using namespace std;
#include <algorithm>
int prec(char c)
{
    if(c=='^')
    return 3;
    if(c=='*' || c=='/')
    return 2;
    if(c=='+' || c=='-')
    return 1;
    else
    return 0;
}
string infixtoprefix(string s)
{
    reverse(s.begin(),s.end());
    stack<char>st;
    string prefix;
    for(int i=0;i<s.length();i++)
    {
        if((s[i]>='a' && s[i]<='z')||(s[i]>='A'&& s[i]<='Z'))
        {
            prefix+=s[i];
        }
        else if(s[i]==')')
        st.push(s[i]);
        else if(s[i]=='(')
        {
            // while(prec(st.top())>prec(s[i]))
            while(st.top()!=')')
            {
              prefix+=st.top();
              st.pop();  
            }
            st.pop();
        }
        else{
            while(!st.empty() && prec(s[i])<=prec(st.top()))
            { 
                cout<<"while inside else hit"<<endl;
                prefix+=st.top();
                st.pop();
            }
            st.push(s[i]);
        }
    }
    while(!st.empty())
    {
        prefix+=st.top();
        st.pop();
    }
    reverse(prefix.begin(),prefix.end());
    return prefix;
}
int main()
{
    string ans;
    cout<<"Enter a valid infix expression";
    cin>>ans;
    cout<<infixtoprefix(ans);
    return 0;
}
//string=(a-b/c)*(a/k-l)
//ans=*-a/bc-/akl
