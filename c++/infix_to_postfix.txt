#include <iostream>
#include <stack>
using namespace std;
int prec(char c)
{
    if(c=='^')
    return 3;
    else if(c=='*' || c=='/')
    return 2;
    else if(c=='+' || c=='-')
    return 1;
    else
    return -1;
}
string itp(string infix)
{
    stack<char> st;
    string postfix;
    for(int i=0;i<infix.length();i++)
    {
    if((infix[i]>='a' && infix[i]<='z')||(infix[i]>='A' && infix[i]<='Z'))
        postfix+=infix[i];
    else if(infix[i]=='(')
    st.push(infix[i]);
    else if(infix[i]==')')
    {
        while(st.top()!='(')
        {
            postfix+=st.top();
            st.pop();
        }
        st.pop();
    }
    else{//if an operator is encountered
       while(!st.empty()  && prec(st.top())>prec(postfix[i]))
       {
       postfix+=st.top();
       st.pop();
       }
       st.push(infix[i]);
    }
    }
    while(!st.empty())
    {
      postfix+=st.top();
      st.pop();
    }
    return postfix;
}
int main()
{
    string infix;
    cout<<"Enter a valid infix expression:"<<endl;
    cin>>infix;
    cout<<itp(infix)<<endl;
    
    return 0;
}
